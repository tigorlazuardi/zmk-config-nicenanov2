#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv {
    acceleration-exponent = <4>;
    time-to-max-speed-ms = <100>;
};

&msc { time-to-max-speed-ms = <0>; };

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        toggle_gaming_layer {
            bindings = <&tog 6>;
            key-positions = <30 33>;
            layers = <0 6>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
            layers = <0>;
        };

        left_ctrl {
            bindings = <&sk LEFT_CONTROL>;
            key-positions = <10 11>;
            layers = <0>;
        };

        left_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <20 21>;
            layers = <0>;
        };

        sticky_wm_layer_left {
            bindings = <&sl 8>;
            key-positions = <21 22>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <1 2>;
            layers = <0>;
        };

        back_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <8 9>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <18 17>;
            layers = <0>;
        };

        right_ctrl {
            bindings = <&sk RIGHT_CONTROL>;
            key-positions = <18 19>;
            layers = <0>;
        };

        right_shift {
            bindings = <&sk RIGHT_SHIFT>;
            key-positions = <29 28>;
            layers = <0>;
        };

        stick_wm_layer_right {
            bindings = <&sl 8>;
            key-positions = <27 28>;
            layers = <0>;
        };

        right_alt {
            bindings = <&sk RIGHT_ALT>;
            key-positions = <27 26>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <3 4>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <13 14>;
            layers = <0>;
        };

        copy_term {
            bindings = <&kp LC(LS(C))>;
            key-positions = <6 5>;
            layers = <0>;
        };

        paste_term {
            bindings = <&kp LC(LS(V))>;
            key-positions = <15 16>;
            layers = <0>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <2 3>;
            layers = <0>;
        };

        left_win {
            bindings = <&kp LEFT_GUI>;
            key-positions = <21 22>;
            layers = <8>;
        };

        right_win {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <28 27>;
            layers = <8>;
        };

        nav_layer_toggle_combo {
            bindings = <&tog 3>;
            key-positions = <24 23>;
            layers = <0 3>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <25 26>;
            layers = <0>;
        };

        left_alt {
            bindings = <&sk LEFT_ALT>;
            key-positions = <23 22>;
            layers = <0>;
        };

        double_quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <16 17>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <7 6>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <7 8>;
            layers = <0>;
        };

        middle_click {
            bindings = <&mkp MB3>;
            key-positions = <7 8>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R         &kp T          &kp Y            &kp U        &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F         &kp G          &kp H            &kp J        &kp K      &kp L    &kp SEMICOLON
&kp Z  &kp X  &kp C  &kp V         &kp B          &kp N            &kp M        &kp COMMA  &kp DOT  &kp FSLH
                     &lt 2 ESCAPE  &lt 1 SPACE    &lt 3 BACKSPACE  &lt 4 ENTER
            >;

            label = "Default Layer";
        };

        symbols_1 {
            bindings = <
&kp PLUS        &kp N7  &kp N8  &kp N9       &kp BACKSPACE    &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH
&kp N0          &kp N4  &kp N5  &kp N6       &kp ENTER        &kp COLON       &kp EQUAL        &kp MINUS             &kp UNDER              &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp N1  &kp N2  &kp N3       &kp CAPSLOCK     &kp PLUS        &kp DOT          &kp LESS_THAN         &kp GREATER_THAN       &kp DOUBLE_QUOTES
                                &bootloader  &bootloader      &bootloader     &bootloader
            >;

            label = "Symbols 1";
        };

        symbols_2 {
            bindings = <
&kp PLUS   &kp N7  &kp N8  &kp N9       &kp BSPC       &kp EXCL   &kp AT         &kp HASH       &kp PERCENT  &kp BACKSLASH
&kp N0     &kp N4  &kp N5  &kp N6       &kp ENTER      &kp LBKT   &kp RBKT       &kp AMPERSAND  &kp STAR     &kp SQT
&kp LSHFT  &kp N1  &kp N2  &kp N3       &kp CLCK       &kp CARET  &kp LS(POUND)  &kp LS(PRCNT)  &kp DOLLAR   &kp QUESTION
                           &bootloader  &bootloader    &trans     &trans
            >;

            label = "Symbols Set 2";
        };

        navigation_layer {
            bindings = <
&kp HOME  &none     &kp UP_ARROW    &none            &kp END        &msc SCRL_UP    &mkp LCLK       &mmv MOVE_UP    &mkp MB2         &none
&none     &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none          &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB4
&none     &none     &none           &none            &none          &none           &none           &none           &none            &mkp MB5
                                    &bootloader      &bootloader    &bootloader     &bootloader
            >;

            label = "Navigation Layer";
        };

        fn_macro_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4       &none          &kp BSPC     &kp N7       &kp N8  &kp N9  &kp PLUS
&kp F5  &kp F6   &kp F7   &kp F8       &none          &kp RET      &kp N4       &kp N5  &kp N6  &kp N0
&kp F9  &kp F10  &kp F11  &kp F12      &none          &kp CLCK     &kp N1       &kp N2  &kp N3  &kp MINUS
                          &bootloader  &bootloader    &bootloader  &bootloader
            >;

            label = "Functions and Macros Layer";
        };

        adjustment_layer {
            bindings = <
&sys_reset      &none  &none         &none         &bt BT_SEL 0    &kp C_VOLUME_UP  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &none
&bootloader     &none  &none         &bt BT_CLR    &bt BT_SEL 1    &kp C_VOL_DN     &none       &none             &none       &bootloader
&bt BT_CLR_ALL  &none  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2    &kp C_MUTE       &none       &none             &none       &sys_reset
                                     &none         &none           &none            &none
            >;

            label = "Adjust Layer";
        };

        gaming_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E         &kp R          &none          &none     &kp UP_ARROW  &none      &kp TAB
&kp LCTRL  &kp A  &kp S  &kp D         &kp F          &none          &kp LEFT  &kp DOWN      &kp RIGHT  &kp RCTRL
&kp LSHFT  &kp Z  &kp X  &kp C         &kp V          &none          &none     &none         &none      &kp RSHIFT
                         &kp LEFT_ALT  &lt 7 SPACE    &kp RIGHT_ALT  &none
            >;

            label = "Gaming Layer";
        };

        gaming_number_layer {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4    &msc SCRL_UP    &mkp MB1        &mmv MOVE_UP    &mkp MB3         &mkp MB2
&trans  &kp N5  &kp N6  &kp N7  &kp N8    &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&trans  &kp N9  &kp N0  &trans  &trans    &none           &mkp MB4        &mkp MB5        &msc SCRL_LEFT   &msc SCRL_RIGHT
                        &none   &none     &mkp MB1        &mkp MB2
            >;

            label = "Gaming Number Layer";
        };

        wm_layer {
            bindings = <
&kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)  &kp LG(T)    &kp LG(Y)   &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(P)
&kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)  &kp G        &kp LG(N0)  &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &kp LG(SEMI)
&kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(B)    &kp LG(N)   &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(FSLH)
                                 &trans     &trans       &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        toggle_adjustment_layer {
            if-layers = <2 3>;
            then-layer = <5>;
        };
    };
};
